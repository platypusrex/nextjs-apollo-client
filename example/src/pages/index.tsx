import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link';
import styles from '../styles/Home.module.css'
import { useQuery } from '@apollo/client';
import { getServerSideApolloProps } from '../lib/apollo';
import { USER_QUERY, USERS_QUERY } from '../gql';
import { UserFragment } from '../types/generated';

interface HomeProps {
  user?: UserFragment | null;
  users?: UserFragment[] | null;
}

const Home: NextPage<HomeProps> = () => {
  const { data } = useQuery(USERS_QUERY);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/example/public/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>User List</h1>

        <div className={styles.grid}>
          {data.users?.map((user: any) => (
            <Link
              href={{ pathname: '/profile/[userId]', query: { userId: user.id } }}
              key={user.id}
            >
              <a className={styles.card}>
                <h2 style={{ margin: 0 }}>{user.name}</h2>
              </a>
            </Link>
          ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export const getServerSideProps = getServerSideApolloProps<HomeProps>({
  hydrateQueries: ['users'],
  onClientInitialized: async (ctx, apolloClient) => {
    const result = await apolloClient.query({
      query: USER_QUERY,
      variables: {
        id: 1,
      }
    });

    return {
      props: {
        user: result?.data.user ?? null,
      }
    }
  },
  onHydrationResults: ({ results }) => {
    const result = results?.find(result => result.data.users);
    return {
      props: {
        users: result?.data.users ?? null,
      }
    }
  }
})

export default Home
