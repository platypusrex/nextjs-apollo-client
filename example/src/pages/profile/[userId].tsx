import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link';
import { ApolloQueryResult, useQuery } from '@apollo/client';
import { getServerSideApolloProps } from '../../lib/apollo';
import { USER_QUERY } from '../../gql';
import { UserQuery, UserQueryVariables } from '../../types/generated';
import styles from '../../styles/Home.module.css'

interface ProfilePageProps {
  userId: number;
}

const ProfilePage: NextPage<ProfilePageProps> = ({ userId }) => {
  const { data } = useQuery<UserQuery, UserQueryVariables>(USER_QUERY, {
    variables: { id: userId }
  });

  const user = data?.user;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/example/public/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Link href="/">
          <a className={styles.card}>Back to  <a href="https://nextjs.org">Users</a></a>
        </Link>

        {user && (
          <div className={styles.grid}>
            <div className={styles.card}>
              <h2>{user.name}</h2>
              <p>{user.email}</p>
              {user.phoneNumber && <p>{user.phoneNumber}</p>}
              {user.age && <p>{user.age}</p>}
              {user.favoriteColor && <p>{user.favoriteColor}</p>}
              {user.favoriteMovie && <p>{user.favoriteMovie}</p>}
            </div>
          </div>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export const getServerSideProps = getServerSideApolloProps<ProfilePageProps>({
  hydrateQueries: ['user'],
  onHydrationResults: ({ results }) => {
    const result: ApolloQueryResult<UserQuery> | undefined = results?.find(result => result.data.user);

    if (!result?.data.user) {
      return {
        redirect: {
          destination: '/create-user',
          permanent: false,
        }
      }
    }

    return {
      props: {
        userId: result.data.user.id,
      }
    }
  }
})

export default ProfilePage
